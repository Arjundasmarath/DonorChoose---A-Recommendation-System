keywordBattle = "Battle"
BattleData = african_conflicts %>%
filter(!is.na(LATITUDE)) %>%
filter(!is.na(LONGITUDE)) %>%
filter(str_detect(EVENT_TYPE,keywordBattle) )
BattleData1 = BattleData %>% filter(YEAR >= 2014)
center_lon = median(BattleData$LONGITUDE)
center_lat = median(BattleData$LATITUDE)
leaflet(BattleData1) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE,radius = ~(FATALITIES),
color = "DarkRed")  %>%
# controls
setView(lng=center_lon, lat=center_lat, zoom=3)
library(plotly)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- plot_ly(
d, x = ~carat, y = ~price,
color = ~carat, size = ~carat
)
p
head(d)
head(mpi_national_continent)
p <- plot_ly(
MPI_national, x = ~`MPI Urban`, y = ~`Headcount Ratio Urban`,
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
p <- plot_ly(
MPI_national, x = ~`MPI Urban`, y = ~`MPI Rural`,
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
p <- plot_ly(
MPI_national, x = ~`MPI Urban`, y = ~`MPI Rural`,
text = ~paste("Country: ", Country, '<br>Continent:', Continent),
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
p <- plot_ly(
mpi_national_continent, x = ~`MPI Urban`, y = ~`MPI Rural`,
text = ~paste("Country: ", Country, '<br>Continent:', Continent),
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
keyword = "Battle"
BattleData = african_conflicts %>%
filter(!is.na(LATITUDE)) %>%
filter(!is.na(LONGITUDE)) %>%
filter(str_detect(EVENT_TYPE,keyword) )
BattleData1 = BattleData %>% filter(YEAR >= 2014)
center_lon = median(BattleData$LONGITUDE)
center_lat = median(BattleData$LATITUDE)
leaflet(BattleData1) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE,radius = ~(FATALITIES),
color = "DarkRed")  %>%
# controls
setView(lng=center_lon, lat=center_lat, zoom=3)
table(mpi_national_continent$Continent)
AF <- mpi_national_continent%>% filter(Continent == "AF")
head(AF)
str(AF)
AF <- mpi_national_continent%>% filter(Continent == "AF")
p <- plot_ly(
AF, x = ~`MPI Urban`, y = ~`MPI Rural`,
text = ~paste("Country: ", Country,),
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
AF <- mpi_national_continent%>% filter(Continent == "AF")
p <- plot_ly(
AF, x = ~`MPI Urban`, y = ~`MPI Rural`,
text = ~paste("Country: ", Country),
color = ~`MPI Urban`, size = ~`MPI Urban`
)
p
head(mpi_national_continent)
p <- plot_ly(
AF, x = ~`Headcount Ratio Urban`, y = ~`Intensity of Deprivation Urban`,
text = ~paste("Country: ", Country),
color = ~`Headcount Ratio Urban`, size = ~`Headcount Ratio Urban`
)
p
country_loans = loan_themes_region %>%
filter(country == "Kenya") %>%
rename (themeType = `Loan Theme Type`)
center_lon = median(country_loans$lon,na.rm = TRUE)
center_lat = median(country_loans$lat,na.rm = TRUE)
leaflet(country_loans) %>% addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,radius = ~(amount/10) ,
color = ~c("blue"))  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 5)
mpi_national_continent$`Headcount Ratio Urban`
mpi_national_continent$`Intensity of Deprivation Urban`
AF <- mpi_national_continent%>% filter(Continent == "AF")
p <- plot_ly(
AF, x = ~`Headcount Ratio Urban`, y = ~`Intensity of Deprivation Urban`,
text = ~paste("Country: ", Country),
color = ~`Headcount Ratio Urban`, size = ~`Headcount Ratio Urban`
)
p
conflicts <- mpi_national_continent %>%
group_by(Country) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(COUNTRY = reorder(Country,Count)) %>%
head(10)
conflicts %>%
ggplot(aes(x = Country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("Darkred")) +
geom_text(aes(x = Country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = 'Conflict Countries and Count') +
coord_flip() +
theme_bw()
conflicts <- mpi_national_continent %>%
group_by(Country) %>%
summarise(Count = `Headcount Ratio Urban`) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(COUNTRY = reorder(Country,Count)) %>%
head(10)
conflicts %>%
ggplot(aes(x = Country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("Darkred")) +
geom_text(aes(x = Country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = 'Conflict Countries and Count') +
coord_flip() +
theme_bw()
conflicts <- mpi_national_continent %>%
group_by(Country) %>%
summarise(Count = `Headcount Ratio Urban`) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(COUNTRY = reorder(Country,Count)) %>%
head(10)
conflicts %>%
ggplot(aes(x = Country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("tomato")) +
geom_text(aes(x = Country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = 'Conflict Countries and Count') +
coord_flip() +
theme_bw()
conflicts <- mpi_national_continent %>%
group_by(Country) %>%
summarise(Count = `Headcount Ratio Urban`) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(Country = reorder(Country,Count)) %>%
head(10)
conflicts %>%
ggplot(aes(x = Country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("tomato")) +
geom_text(aes(x = Country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = 'Conflict Countries and Count') +
coord_flip() +
theme_bw()
Headcount_Urban <- mpi_national_continent %>%
group_by(Country) %>%
summarise(Count = `Headcount Ratio Urban`) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(Country = reorder(Country,Count)) %>%
head(10)
Headcount_Urban %>%
ggplot(aes(x = Country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("tomato")) +
geom_text(aes(x = Country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = '% of Poor people in Urban Headcount') +
coord_flip() +
theme_bw()
p <- plot_ly(
mpi_national_continent, x = ~`Headcount Ratio Urban`, y = ~`Intensity of Deprivation Urban`,
text = ~paste("Country: ", Country),
color = ~`Headcount Ratio Urban`, size = ~`Headcount Ratio `
)
p
p <- plot_ly(
mpi_national_continent, x = ~`Headcount Ratio Urban`, y = ~`Intensity of Deprivation Urban`,
text = ~paste("Country: ", Country),
color = ~`Headcount Ratio Urban`, size = ~`Headcount Ratio Urban`
)
p
knitr::opts_chunk$set(echo = TRUE)
p3 <- train %>%
mutate(wday = wday(LastWorkingDay, label = TRUE, week_start = 1)) %>%
ggplot(aes(wday, fill = wday)) +
geom_bar() +
labs(x = "Day of the Week") +
theme(legend.position = "none")
countries_continents = countries_continents %>%
select(name,Continent)
library(readr)
library(mapdata)
library(ggplot2)
library(stringr)
library(dplyr)
library(lubridate)
library(xts)
library(highcharter)
library(ggforce)
Donations$Donation.Received.Date <-as.Date(Donations$`Donation Received Date`)
# Donations$Donation.Received.Date <-as.Date(Donations$`Donation Received Date`)
by_Date_Donation_Count <-Donations %>%group_by(Donation.Received.Date) %>%summarise(Total=n())
Donations <- read_csv("Donations.csv")
Projects <- read_csv("Projects.csv")
Schools <- read_csv("Schools.csv")
Teachers <- read_csv("Teachers.csv")
Resources <- read.csv("Resources.csv")
Donations$Donation.Received.Year <-year(Donations$Donation.Received.Date)
Donations$Donation.Received.Year <-year(Donations$Donation.Received.Date)
Donations$`Donation Received Date`
library(readr)
library(mapdata)
library(ggplot2)
library(stringr)
library(dplyr)
library(lubridate)
library(xts)
library(highcharter)
library(ggforce)
ratings <- read_csv("ratings.csv")
movies <- read_csv("movies.csv")
Donations <- read_csv("Donations.csv")
Projects <- read_csv("Projects.csv")
library(reshape2)
Donations_1 <- sample_n(Donations,1000)
head(Donations_1)
Donations_1 %>%
count(`Donor ID`) %>%
arrange(desc(n)) %>%
head()
Donations_1 %>%
count(`Donor ID`)
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(donorid)) %>%
filter(!is.na(projectsubjectcategory))
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(donorid) %>%
arrange(desc(n))
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`) %>%
arrange(desc(n))
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`,`Project ID`) %>%
arrange(desc(n))
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`,`Donation Amount`) %>%
arrange(desc(n))
head(projdon)
head(projdon)
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`,`Project ID`) %>%
arrange(desc(n))
head(projdon)
head(projdon)
setwd("D:/kaggle/DonorChoose 2/Start")
data <- read_csv("data.csv")
input <- read_csv("data.csv")
#Get the list of merchants/items
merchant <- unique(input$individual_merchant)
merchant <- merchant[order(merchant)]
target_merchants <- merchant
sno <- 1:length(target_merchants)
merchant_ident <- cbind(target_merchants,sno)
head(merchant)
#Get the list of merchants/items
merchant <- unique(input$individual_merchant)
head(merchant)
merchant <- merchant[order(merchant)]
head(merchant)
target_merchants <- merchant
sno <- 1:length(target_merchants)
merchant_ident <- cbind(target_merchants,sno)
merchant_ident
#Create a reference mapper for all merchant
colnames(merchant_ident) <- c("individual_merchant","sno")
correlation_mat = matrix(0,length(merchant),length(target_merchants))
correlation_mat = as.data.frame(correlation_mat)
trans = read.transactions("Transaction_file.csv", format = "single", sep = ",", cols =
c("inidividual_customer", "individual_merchant"))
install.packages('arules')
library(arules)
input <- read_csv("data.csv")
#Get the list of merchants/items
merchant <- unique(input$individual_merchant)
merchant <- merchant[order(merchant)]
target_merchants <- merchant
sno <- 1:length(target_merchants)
merchant_ident <- cbind(target_merchants,sno)
#Create a reference mapper for all merchant
colnames(merchant_ident) <- c("individual_merchant","sno")
# Create a correlation matrix for these merchants
correlation_mat = matrix(0,length(merchant),length(target_merchants))
correlation_mat = as.data.frame(correlation_mat)
trans = read.transactions("Transaction_file.csv", format = "single", sep = ",", cols =
c("inidividual_customer", "individual_merchant"))
olnames(merchant_ident) <- c("individual_merchant","sno")
colnames(merchant_ident) <- c("individual_merchant","sno")
# Create a correlation matrix for these merchants
correlation_mat = matrix(0,length(merchant),length(target_merchants))
correlation_mat = as.data.frame(correlation_mat)
trans = read.transactions("data.csv", format = "single", sep = ",", cols =
c("inidividual_customer", "individual_merchant"))
c <- crossTable(trans)
rowitem <- rownames(c)
columnitem <- colnames(c)
correlation_mat <- c[order(as.numeric(rowitem)),order(as.numeric(columnitem))]
for(i in 1:9822) {
correlation_mat[i,] <- correlation_mat[i,]/correlation_mat[i,i]
}
input <- read_csv("data.csv")
#Get the list of merchants/items
merchant <- unique(input$individual_merchant)
merchant <- merchant[order(merchant)]
target_merchants <- merchant
sno <- 1:length(target_merchants)
merchant_ident <- cbind(target_merchants,sno)
#Create a reference mapper for all merchant
colnames(merchant_ident) <- c("individual_merchant","sno")
# Create a correlation matrix for these merchants
correlation_mat = matrix(0,length(merchant),length(target_merchants))
correlation_mat = as.data.frame(correlation_mat)
trans = read.transactions("data.csv", format = "single", sep = ",", cols =
c("inidividual_customer", "individual_merchant"))
c <- crossTable(trans)
rowitem <- rownames(c)
columnitem <- colnames(c)
correlation_mat <- c[order(as.numeric(rowitem)),order(as.numeric(columnitem))]
for(i in 1:9822) {
correlation_mat[i,] <- correlation_mat[i,]/correlation_mat[i,i]
}
colnames(correlation_mat) <- target_merchants
rownames(correlation_mat) <- merchant
# Now let's start recommending for individual customer
possible_slots <- 20
avail <- 21
merch_rec <- matrix(0, nrow = length(target_customers), ncol = avail)
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`,`Donation Amount`) %>%
arrange(desc(n))
head(projdon)
head(projdon)
projdon <- sample_n(Donations, 10000)
projdon = projdon %>%
filter(!is.na(`Donor ID`))
projdon =   projdon %>%
count(`Donor ID`,`Project ID`) %>%
arrange(desc(n))
head(projdon)
head(projdon)
View(projdon)
head(Donations_1)
n <- distinct( Donations_1$`Project ID`)
n <- unique( Donations_1$`Project ID`)
n
table(n)
count(n)
m <- unique(Donations_1$ `Donor ID`)
m
n
m
all <- merge(x=Projects_1,y=Donations, by = "Project ID",all = TRUE)
Donations_1 <- sample_n(Donations,1000)
all <- merge(x=Projects,y=Donations_1, by = "Project ID",all = TRUE)
View(all)
table(all$`Project Type`)
n <- unique(all$`Project Subject Subcategory Tree` )
m <- unique(all$ `Donor ID`)
n
m
n
id <- c('a', 'a', 'b', 'f', 'b', 'a')
day <- c('x', 'x', 'x', 'y', 'z', 'x')
test <- data.frame(id, day)
output <- as.data.frame.matrix(table(test))
output
test <- data.frame(n,m)
Projects_1 <- sample_n(Projects,1000)
Projects_1 <- Projects_1 %>% select(`Project ID`,`Project Title`,`Project Subject Category Tree`)
genres <- as.data.frame(Projects_1$`Project Subject Category Tree`, stringsAsFactors=FALSE)
library(data.table)
genres2 <- as.data.frame(tstrsplit(genres[,1], '[,]', type.convert=TRUE), stringsAsFactors=FALSE)
colnames(genres2) <- c(1:2)
genre_list <- c("Literacy & Language", "Applied Learning", "Music & The Arts", "Special Needs", "History & Civics","Health & Sports", "Math & Science", "Warmth","Care & Hunger")
genre_matrix <- matrix(0,8571,9) #empty matrix
genre_matrix[1,] <- genre_list #set first row to genre list
colnames(genre_matrix) <- genre_list #set column names to genre list
#iterate through matrix
for (i in 1:nrow(genres2)) {
for (c in 1:ncol(genres2)) {
genmat_col = which(genre_matrix[1,] == genres2[i,c])
genre_matrix[i+1,genmat_col] <- 1
}
}
#convert into dataframe
genre_matrix2 <- as.data.frame(genre_matrix[-1,], stringsAsFactors=FALSE) #remove first row, which was the genre list
for (c in 1:ncol(genre_matrix2)) {
genre_matrix2[,c] <- as.integer(genre_matrix2[,c])
} #convert from characters to integers
# all <- merge(x=Projects_1,y=Donations, by = "Project ID",all = TRUE)
Donations_1 <- sample_n(Donations,1000)
Donations_1 <- Donations_1 %>% select(`Project ID`,`Donor ID`)
Donations_1$ratings <-1
Donations_2 <- dcast(Donations_1, `Project ID`~`Donor ID`, value.var = "ratings", na.rm=FALSE)
for (i in 1:ncol(Donations_2)){
Donations_2[which(is.na(Donations_2[,i]) == TRUE),i] <- 0
}
Donations_2 = Donations_2[,-1]
Donations_2
#Remove rows that are not rated from movies dataset
projectIds <- length(unique(Projects_1$`Project ID`)) #8570
donationIds <- length(unique(Donations_1$`Project ID`)) #8552
project2 <- Donations_1[-which((projectIds %in% donationIds) == FALSE),]
rownames(project2) <- NULL
#Remove rows that are not rated from genre_matrix2
genre_matrix3 <- genre_matrix2[-which((projectIds %in% donationIds) == FALSE),]
rownames(genre_matrix3) <- NULL
#Calculate dot product for User Profiles
result = matrix(0,9,973)
for (c in 1:ncol(Donations_2)){
for (i in 1:ncol(genre_matrix3)){
result[i,c] <- sum((genre_matrix3[,i]) * (Donations_2[,c]))
}
}
#Convert to Binary scale
for (i in 1:nrow(result)){
if (result[i] < 0){
result[i] <- 0
}
else {
result[i] <- 1
}
}
result
result2 <- result[1,] #First user's profile
sim_mat <- rbind.data.frame(result2, genre_matrix3)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
#Calculate Jaccard distance between user profile and all movies
library(proxy)
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:8552]))
rows <- which(sim_results == min(sim_results))
#Recommended movies
Projects[rows,2]
Projects[rows,]
donationIds
result2 <- result[1,] #First user's profile
sim_mat <- rbind.data.frame(result2, genre_matrix3)
sim_mat <- data.frame(lapply(sim_mat,function(x){as.integer(x)})) #convert data to type integer
#Calculate Jaccard distance between user profile and all movies
library(proxy)
sim_results <- dist(sim_mat, method = "Jaccard")
sim_results <- as.data.frame(as.matrix(sim_results[1:997]))
rows <- which(sim_results == min(sim_results))
#Recommended movies
Projects[rows,2]
Projects[rows,]
Donations_2
genre_matrix2
recom
recom_list
library(readr)
library(mapdata)
library(ggplot2)
library(stringr)
library(dplyr)
library(lubridate)
library(xts)
library(highcharter)
library(ggforce)
Donations <- read_csv("Donations.csv")
Projects <- read_csv("Projects.csv")
